/*
 *
 * SPDX-FileCopyrightText: 2023 Project CHIP Authors
 *
 * SPDX-License-Identifier: Apache-2.0
 */
package chip.devicecontroller;

import chip.clusterinfo.CommandParameterInfo;
import chip.clusterinfo.InteractionInfo;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class ClusterReadMapping {

{% for cluster in clientClusters | sort(attribute='code') %}
  {%-  set typeLookup = idl | createLookupContext(cluster) %}
    private static Map<String, InteractionInfo> read{{cluster.name}}InteractionInfo() {
       Map<String, InteractionInfo> result = new LinkedHashMap<>();
     {%- for attribute in cluster.attributes | sort(attribute='name') | attributesWithCallback(typeLookup) %}
        {#- TODO: add support for struct-typed attributes -#}
        Map<String, CommandParameterInfo> read{{cluster.name}}{{attribute.definition.name | upfirst}}CommandParams = new LinkedHashMap<String, CommandParameterInfo>();
        InteractionInfo read{{cluster.name}}{{attribute.definition.name | upfirst}}AttributeInteractionInfo = new InteractionInfo(
          (cluster, callback, commandArguments) -> {
            ((ChipClusters.{{cluster.name}}Cluster) cluster).read{{attribute.definition.name | upfirst}}Attribute(
              ({{ attribute | chipClustersCallbackName(typeLookup) }}) callback
            );
          },
          () -> new ClusterInfoMapping.{{ attribute | delegatedCallbackName(typeLookup)}}(),
          read{{cluster.name}}{{attribute.definition.name | upfirst}}CommandParams
        );
        result.put("read{{attribute.definition.name | upfirst}}Attribute", read{{cluster.name}}{{attribute.definition.name | upfirst}}AttributeInteractionInfo);
     {% endfor %}
       return result;
    }

{%- endfor %}
    @SuppressWarnings("serial")
    public Map<String, Map<String, InteractionInfo>> getReadAttributeMap() {

        return new HashMap<String, Map<String, InteractionInfo>>(){% raw %}{{{% endraw %}
    {%- for cluster in clientClusters | sort(attribute='code') %}
            put("{{cluster.name | lowfirst_except_acronym}}", read{{cluster.name}}InteractionInfo());
    {%- endfor -%}
        }};
    }
}

