# SPDX-FileCopyrightText: 2023 Project CHIP Authors
#
# SPDX-License-Identifier: Apache-2.0

import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")

import("${build_root}/toolchain/flashable_executable.gni")

template("stm32_executable") {
  # -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
  # (Add .bin + .hex to .elf + flashing scripts in output dir/)
  # -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-

  output_base_name = get_path_info(invoker.output_name, "name")

  objcopy_image_name = output_base_name + ".hex"
  objcopy_image_format = "ihex"
  objcopy = "arm-none-eabi-objcopy"

  # Copy flashing dependencies to the output directory so that the output
  # is collectively self-contained; this allows flashing to work reliably
  # even if the build and flashing steps take place on different machines
  # or in different containers.

  flashing_runtime_target = target_name + ".flashing_runtime"
  flashing_script_inputs = [
    "${chip_root}/scripts/flashing/stm32_firmware_utils.py",
    "${chip_root}/scripts/flashing/firmware_utils.py",
  ]
  copy(flashing_runtime_target) {
    sources = flashing_script_inputs
    outputs = [ "${root_out_dir}/{{source_file_part}}" ]
  }

  flashing_script_generator =
      "${chip_root}/scripts/flashing/gen_flashing_script.py"
  flashing_script_name = output_base_name + ".flash.py"
  flashing_options = [ "stm32" ]

  flash_target_name = target_name + ".flash_executable"
  flashbundle_name = "${target_name}.flashbundle.txt"
  flashable_executable(flash_target_name) {
    forward_variables_from(invoker, "*")
    data_deps = [ ":${flashing_runtime_target}" ]
  }

  # Add a target which generates the .bin file in addition to .hex.
  executable_target = "$flash_target_name.executable"
  bin_image_name = output_base_name + ".bin"
  bin_target_name = target_name + ".bin"
  objcopy_convert(bin_target_name) {
    conversion_input = "${root_out_dir}/${invoker.output_name}"
    conversion_output = "${root_out_dir}/${bin_image_name}"
    conversion_target_format = "binary"
    deps = [ ":$executable_target" ]
  }

  group(target_name) {
    deps = [
      ":$bin_target_name",
      ":$flash_target_name",
    ]
  }
}
