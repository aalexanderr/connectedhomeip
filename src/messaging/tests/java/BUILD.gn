# SPDX-FileCopyrightText: 2020-2021 Project CHIP Authors
#
# SPDX-License-Identifier: Apache-2.0

import("//build_overrides/build.gni")
import("//build_overrides/chip.gni")
import("${chip_root}/build/chip/java/config.gni")
import("${chip_root}/build/chip/java/rules.gni")

if (!matter_enable_java_compilation) {
  import("${build_root}/config/android_abi.gni")
}

shared_library("jni") {
  output_name = "libCHIPMessaging"

  sources = [ "MessagingContext-JNI.cpp" ]
  deps = [ "${chip_root}/src/messaging/tests:helpers" ]

  public_configs = [ "${chip_root}/src:includes" ]

  if (matter_enable_java_compilation) {
    defines = [ "JAVA_MATTER_CONTROLLER_TEST" ]
    include_dirs = java_matter_controller_dependent_paths

    deps += [ "${chip_root}/src/platform/Linux" ]

    cflags = [ "-Wno-unknown-pragmas" ]

    output_dir = "${root_out_dir}/lib/jni"
  } else {
    deps += [ "${chip_root}/src/platform/android" ]

    output_dir = "${root_out_dir}/lib/jni/${android_abi}"
  }

  ldflags = [ "-Wl,--gc-sections" ]
}

android_library("java") {
  output_name = "CHIPMessaging.jar"

  deps = [ "${chip_root}/third_party/java_deps:annotation" ]

  data_deps = [ ":jni" ]

  sources = [ "src/chip/testing/MessagingContext.java" ]

  if (matter_enable_java_compilation) {
    deps += [
      "${chip_root}/third_party/java_deps:json",
      "${chip_root}/third_party/java_deps/stub_src",
    ]
  } else {
    deps += [ ":android" ]

    data_deps += [ "${chip_root}/build/chip/java:shared_cpplib" ]
  }

  javac_flags = [ "-Xlint:deprecation" ]

  # TODO: add classpath support (we likely need to add something like
  #  ..../platforms/android-26/android.jar to access BLE items)
}

if (!matter_enable_java_compilation) {
  java_prebuilt("android") {
    jar_path = "${android_sdk_root}/platforms/android-26/android.jar"
  }
}
