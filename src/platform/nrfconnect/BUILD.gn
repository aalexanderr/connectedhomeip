# SPDX-FileCopyrightText: (c) 2021 Project CHIP Authors
#
# SPDX-License-Identifier: Apache-2.0

import("//build_overrides/chip.gni")

import("${chip_root}/src/platform/device.gni")
import("${chip_root}/src/platform/nrfconnect/args.gni")

assert(chip_device_platform == "nrfconnect")

static_library("nrfconnect") {
  sources = [
    "../SingletonConfigurationManager.cpp",
    "../Zephyr/BLEManagerImpl.cpp",
    "../Zephyr/ConfigurationManagerImpl.cpp",
    "../Zephyr/DiagnosticDataProviderImpl.cpp",
    "../Zephyr/DiagnosticDataProviderImpl.h",
    "../Zephyr/KeyValueStoreManagerImpl.cpp",
    "../Zephyr/Logging.cpp",
    "../Zephyr/PlatformManagerImpl.cpp",
    "../Zephyr/SysHeapMalloc.h",
    "../Zephyr/SystemTimeSupport.cpp",
    "../Zephyr/ZephyrConfig.cpp",
    "../Zephyr/ZephyrConfig.h",
    "BLEManagerImpl.h",
    "BlePlatformConfig.h",
    "CHIPDevicePlatformConfig.h",
    "CHIPDevicePlatformEvent.h",
    "CHIPPlatformConfig.h",
    "ConfigurationManagerImpl.h",
    "ConnectivityManagerImpl.cpp",
    "ConnectivityManagerImpl.h",
    "DeviceNetworkProvisioningDelegateImpl.cpp",
    "DeviceNetworkProvisioningDelegateImpl.h",
    "InetPlatformConfig.h",
    "KeyValueStoreManagerImpl.h",
    "PlatformManagerImpl.h",
    "Reboot.cpp",
    "Reboot.h",
    "SystemPlatformConfig.h",
  ]

  public = [
    "${chip_root}/src/credentials/CHIPCert.h",
    "${chip_root}/src/credentials/CertificationDeclaration.h",
    "${chip_root}/src/credentials/DeviceAttestationCredsProvider.h",
  ]

  public_deps = [ "${chip_root}/src/platform:platform_base" ]

  if (chip_enable_factory_data) {
    sources += [
      "FactoryDataParser.c",
      "FactoryDataParser.h",
      "FactoryDataProvider.cpp",
      "FactoryDataProvider.h",
    ]
  }

  if (chip_enable_openthread) {
    sources += [
      "../OpenThread/OpenThreadUtils.cpp",
      "../Zephyr/ThreadStackManagerImpl.cpp",
      "ThreadStackManagerImpl.h",
    ]

    if (chip_mdns == "platform") {
      sources += [ "../OpenThread/DnssdImpl.cpp" ]
      deps = [ "${chip_root}/src/lib/dnssd:platform_header" ]
    }
  }

  if (chip_enable_nfc) {
    sources += [
      "../Zephyr/NFCManagerImpl.cpp",
      "NFCManagerImpl.h",
    ]
  }

  if (chip_enable_ota_requestor) {
    sources += [
      "OTAImageProcessorImpl.cpp",
      "OTAImageProcessorImpl.h",
    ]
  }

  if (chip_malloc_sys_heap) {
    sources += [ "../Zephyr/SysHeapMalloc.cpp" ]
  }
}
