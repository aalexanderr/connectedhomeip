# SPDX-FileCopyrightText: (c) 2021 Project CHIP Authors
#
# SPDX-License-Identifier: Apache-2.0

import("//build_overrides/chip.gni")

import("${chip_root}/src/platform/device.gni")

assert(chip_device_platform == "qpg")

if (chip_enable_openthread) {
  import("//build_overrides/openthread.gni")
}

static_library("qpg") {
  sources = [
    "../FreeRTOS/SystemTimeSupport.cpp",
    "../SingletonConfigurationManager.cpp",
    "BLEManagerImpl.cpp",
    "BLEManagerImpl.h",
    "BlePlatformConfig.h",
    "CHIPDevicePlatformConfig.h",
    "CHIPDevicePlatformEvent.h",
    "CHIPPlatformConfig.h",
    "ConfigurationManagerImpl.cpp",
    "ConfigurationManagerImpl.h",
    "ConnectivityManagerImpl.cpp",
    "ConnectivityManagerImpl.h",
    "DeviceNetworkProvisioningDelegateImpl.cpp",
    "DeviceNetworkProvisioningDelegateImpl.h",
    "DiagnosticDataProviderImpl.cpp",
    "DiagnosticDataProviderImpl.h",
    "FactoryDataProvider.cpp",
    "FactoryDataProvider.h",
    "InetPlatformConfig.h",
    "Logging.cpp",
    "OTAImageProcessorImpl.cpp",
    "PlatformManagerImpl.cpp",
    "PlatformManagerImpl.h",
    "SystemPlatformConfig.h",
    "qpgConfig.cpp",
    "qpgConfig.h",
  ]

  deps = []

  public = [ "${chip_root}/src/credentials/DeviceAttestationCredsProvider.h" ]

  public_deps = [ "${chip_root}/src/platform:platform_base" ]

  public_configs = []

  sources += [
    "KeyValueStoreManagerImpl.cpp",
    "KeyValueStoreManagerImpl.h",
  ]

  if (chip_enable_openthread) {
    if (chip_openthread_ftd) {
      public_deps += [ "${openthread_root}:libopenthread-ftd" ]
    } else {
      public_deps += [ "${openthread_root}:libopenthread-mtd" ]
    }

    public_configs += [
      "${chip_root}/third_party/openthread/platforms/qpg:openthread_qpg_config",
      "${chip_root}/src/lib/address_resolve:default_address_resolve_config",
    ]

    sources += [
      "../OpenThread/OpenThreadUtils.cpp",
      "ThreadStackManagerImpl.cpp",
      "ThreadStackManagerImpl.h",
    ]

    if (chip_mdns == "platform") {
      sources += [ "../OpenThread/DnssdImpl.cpp" ]
      deps += [ "${chip_root}/src/lib/dnssd:platform_header" ]
    }
  }
}
