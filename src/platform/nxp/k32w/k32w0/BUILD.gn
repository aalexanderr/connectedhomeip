# SPDX-FileCopyrightText: (c) 2021 Project CHIP Authors
#
# SPDX-License-Identifier: Apache-2.0

import("//build_overrides/chip.gni")
import("//build_overrides/k32w0_sdk.gni")

import("${chip_root}/src/platform/device.gni")
import("${k32w0_sdk_build_root}/k32w0_sdk.gni")

assert(chip_device_platform == "k32w0")

if (chip_enable_openthread) {
  import("//build_overrides/openthread.gni")
}

static_library("k32w0") {
  sources = [
    "../../../SingletonConfigurationManager.cpp",
    "../common/RamStorage.cpp",
    "../common/RamStorage.h",
    "BLEManagerImpl.cpp",
    "BLEManagerImpl.h",
    "CHIPDevicePlatformConfig.h",
    "CHIPDevicePlatformEvent.h",
    "ConfigurationManagerImpl.cpp",
    "ConfigurationManagerImpl.h",
    "ConnectivityManagerImpl.cpp",
    "ConnectivityManagerImpl.h",
    "DefaultTestEventTriggerDelegate.cpp",
    "DefaultTestEventTriggerDelegate.h",
    "DeviceNetworkProvisioningDelegateImpl.cpp",
    "DeviceNetworkProvisioningDelegateImpl.h",
    "DiagnosticDataProviderImpl.cpp",
    "DiagnosticDataProviderImpl.h",
    "K32W0Config.cpp",
    "K32W0Config.h",
    "K32W0FactoryDataProvider.cpp",
    "K32W0FactoryDataProvider.h",
    "KeyValueStoreManagerImpl.cpp",
    "KeyValueStoreManagerImpl.h",
    "Logging.cpp",
    "NFCManagerImpl.cpp",
    "NFCManagerImpl.h",
    "PlatformManagerImpl.cpp",
    "PlatformManagerImpl.h",
    "SystemTimeSupport.cpp",
    "ble_function_mux.c",
  ]

  public = [
    "${chip_root}/src/credentials/DeviceAttestationCredsProvider.h",
    "${chip_root}/src/credentials/examples/DeviceAttestationCredsExample.h",
    "${chip_root}/src/credentials/examples/ExampleDACs.h",
    "${chip_root}/src/credentials/examples/ExamplePAI.h",
  ]

  if (chip_with_low_power != 0) {
    sources += [ "LowPowerHooks.cpp" ]
  }

  if (chip_enable_ota_requestor) {
    sources += [
      "OTAImageProcessorImpl.cpp",
      "OTAImageProcessorImpl.h",
    ]
  }

  deps = []

  public_deps = [ "${chip_root}/src/platform:platform_base" ]

  if (chip_enable_openthread) {
    sources += [
      "../../../OpenThread/OpenThreadUtils.cpp",
      "ThreadStackManagerImpl.cpp",
      "ThreadStackManagerImpl.h",
    ]

    if (chip_mdns == "platform") {
      sources += [ "../../../OpenThread/DnssdImpl.cpp" ]
      deps += [ "${chip_root}/src/lib/dnssd:platform_header" ]
    }
  }

  public_deps += [ "${chip_root}/src/crypto" ]

  public_configs =
      [ "${chip_root}/src/lib/address_resolve:default_address_resolve_config" ]
}
